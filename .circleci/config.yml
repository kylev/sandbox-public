version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.19
  aws-ecr: circleci/aws-ecr@6.6.0
  aws-s3: circleci/aws-s3@1.0.12

commands:
  setup_env:
    steps:
      - run:
          name: Setup SSM-derived envionment variables.
          command: |
            sudo curl -sSL -o /usr/local/bin/chamber https://github.com/segmentio/chamber/releases/download/v2.3.2/chamber-v2.3.2-linux-amd64
            sudo chmod 755 /usr/local/bin/chamber
            chamber export --format dotenv circleci/shared/env circleci/${CIRCLE_PROJECT_REPONAME}/env | sed -e 's/^/export /' >> $BASH_ENV

jobs:
  rubyapp_test:
    docker:
      - image: circleci/ruby:2.6.5
    steps:
      - setup_env
      - checkout
      - restore_cache:
          key: sandbox-rubyapp-{{ checksum "rubyapp/Gemfile.lock" }}
      - run:
          name: Test
          command: |
            cd rubyapp
            bundle check --path vendor/bundle || bundle install --path vendor/bundle

            mkdir -p ~/results
            bundle exec rspec --format progress --format RspecJunitFormatter -o ~/results/rspec.xml
      - save_cache:
          key: sandbox-rubyapp-{{ checksum "rubyapp/Gemfile.lock" }}
          paths:
            - rubyapp/vendor/bundle
      - store_test_results:
          path: ~/results

  opsbot_test:
    docker:
      - image: circleci/python:3.8.0
    steps:
      - setup_env
      - checkout
      - restore_cache:
          key: sandbox-opsbot-{{ checksum "opsbot/requirements.txt" }}-{{ checksum "opsbot/setup.py" }}
      - run:
          name: nosetests
          command: |
            cd opsbot
            pip install --user -r requirements.txt '.[development]'

            mkdir -p ~/results/nose
            nosetests --with-xunit --xunit-file ~/results/nose.xml
      - save_cache:
          key: sandbox-opsbot-{{ checksum "opsbot/requirements.txt" }}-{{ checksum "opsbot/setup.py" }}
          paths:
            - ~/.cache/pip
            - ~/.local
      - store_test_results:
          path: ~/results

  rubyapp_package:
    executor: aws-ecr/default
    steps:
      - setup_env
      - aws-ecr/build-and-push-image:
          dockerfile: rubyapp/Dockerfile
          repo: sandbox-rubyapp
          tag: ${CIRCLE_SHA1}
          path: rubyapp
      - aws-ecr/build-and-push-image:
          dockerfile: rubyapp/Dockerfile
          extra-build-args: --target dev
          repo: sandbox-rubyapp
          tag: ${CIRCLE_SHA1}-dev
          path: rubyapp

  rubyapp_cd:
    docker:
      - image: circleci/python:3
    steps:
      - setup_env
      - run:
          name: Deploy
          command: curl -XPOST ${OPSBOT_API_URL}

  opsbot_package:
    docker:
      - image: circleci/python:3
    steps:
      - setup_env
      - checkout
      - restore_cache:
          key: sandbox-opsbot-package-{{ checksum "opsbot/requirements.txt" }}-{{ checksum "opsbot/setup.py" }}
      - run:
          name: Zip for Lambda
          command: |
            cd opsbot
            make package
      - save_cache:
          key: sandbox-opsbot-package-{{ checksum "opsbot/requirements.txt" }}-{{ checksum "opsbot/setup.py" }}
          paths:
            - opsbot/.package
      - aws-s3/copy:
          from: opsbot/lambda.zip
          to: s3://kylev-utility/opsbot/lambda-${CIRCLE_SHA1}.zip

  opsbot_cd:
    docker:
      - image: circleci/python:3
    steps:
      - aws-cli/setup
      - run:
          name: Deploy
          command: |
            aws lambda update-function-code --function-name opsbot_lambda --publish --s3-bucket kylev-utility --s3-key opsbot/lambda-${CIRCLE_SHA1}.zip

workflows:
  version: 2
  ci:
    jobs:
      - rubyapp_test
      - rubyapp_package
      - rubyapp_cd:
          filters:
            branches:
              only:
                - master
                - /^kv_/
          requires:
            - rubyapp_test
            - rubyapp_package
      - opsbot_test
      - opsbot_package
      - opsbot_cd:
          filters:
            branches:
              only:
                - master
          requires:
            - opsbot_test
            - opsbot_package
